{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/germanov/dev/weather/components/Weather/Weather.js\";\nimport { useState, useEffect, useContext } from 'react';\nimport Image from 'next/image';\nimport { AppContext } from '../../context/AppContext';\nimport styles from '../../styles/WeatherBlock.module.css';\nimport Day from '../Day/Day';\nimport Spinner from '../Spinner/Spinner';\nimport MainWeather from '../MainWeather/MainWeather';\n\nconst Weather = () => {\n  const {\n    long,\n    lat,\n    units,\n    loading,\n    setLoading,\n    cityName,\n    setCityName,\n    countryName,\n    setCountryName,\n    location,\n    setLocation\n  } = useContext(AppContext);\n  useEffect(() => {\n    reverseGeocoding();\n    getLocationData();\n  }, [lat, long, units]);\n\n  const getLocationData = async () => {\n    const weatherAPI = `https://api.darksky.net/forecast/d090ad71e840a71b480a0e2443977dab/${lat},${long}?units=${units}`;\n    const response = await fetch(weatherAPI);\n\n    if (response.ok) {\n      const data = await response.json();\n      setLocation(data);\n      setLoading(false);\n    }\n  };\n\n  const reverseGeocoding = async () => {\n    const reverseAPI = `https://api.opencagedata.com/geocode/v1/json?q=${lat}+${long}&key=d6d274c390434a5da83e82945466c21a`;\n    const response = await fetch(reverseAPI);\n\n    if (response.ok) {\n      const data = await response.json();\n\n      if (!data.results[0].components.city && !data.results[0].components.village) {\n        setCityName(data.results[0].components.town);\n        setCountryName(data.results[0].components.country);\n      }\n\n      if (!data.results[0].components.city && !data.results[0].components.town) {\n        setCityName(data.results[0].components.village);\n        setCountryName(data.results[0].components.country);\n      }\n\n      if (!data.results[0].components.town && !data.results[0].components.village) {\n        setCityName(data.results[0].components.city);\n        setCountryName(data.results[0].components.country);\n      }\n    }\n  };\n\n  const contentHolder = !loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.Days,\n      children: location.daily.data.map((day, index) => {\n        let dayOfWeek = formatDate(day.time);\n\n        if (index == 0) {\n          dayOfWeek = 'Today';\n        }\n\n        if (index == 1) {\n          dayOfWeek = 'Tomorrow';\n        }\n\n        return /*#__PURE__*/_jsxDEV(Day, {\n          id: day.time,\n          day: dayOfWeek,\n          icon: weatherIcon(day.icon),\n          temperatureHigh: Math.round(day.temperatureHigh),\n          temperatureLow: Math.round(day.temperatureLow),\n          summary: day.summary\n        }, day.time, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 7\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 4\n    }, this)\n  }, void 0, false) : /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 3\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: styles.WeatherBlock,\n    children: [/*#__PURE__*/_jsxDEV(MainWeather, {\n      location: location\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.Content,\n      children: contentHolder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 3\n  }, this);\n};\n\nexport default Weather;","map":{"version":3,"sources":["/Users/germanov/dev/weather/components/Weather/Weather.js"],"names":["useState","useEffect","useContext","Image","AppContext","styles","Day","Spinner","MainWeather","Weather","long","lat","units","loading","setLoading","cityName","setCityName","countryName","setCountryName","location","setLocation","reverseGeocoding","getLocationData","weatherAPI","response","fetch","ok","data","json","reverseAPI","results","components","city","village","town","country","contentHolder","Days","daily","map","day","index","dayOfWeek","formatDate","time","weatherIcon","icon","Math","round","temperatureHigh","temperatureLow","summary","WeatherBlock","Content"],"mappings":"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","sourcesContent":["import { useState, useEffect, useContext } from 'react';\nimport Image from 'next/image';\nimport { AppContext } from '../../context/AppContext';\n\nimport styles from '../../styles/WeatherBlock.module.css';\n\nimport Day from '../Day/Day';\nimport Spinner from '../Spinner/Spinner';\nimport MainWeather from '../MainWeather/MainWeather';\n\nconst Weather = () => {\n\tconst {\n\t\tlong,\n\t\tlat,\n\t\tunits,\n\t\tloading,\n\t\tsetLoading,\n\t\tcityName,\n\t\tsetCityName,\n\t\tcountryName,\n\t\tsetCountryName,\n\t\tlocation,\n\t\tsetLocation,\n\t} = useContext(AppContext);\n\n\tuseEffect(() => {\n\t\treverseGeocoding();\n\t\tgetLocationData();\n\t}, [lat, long, units]);\n\n\tconst getLocationData = async () => {\n\t\tconst weatherAPI = `https://api.darksky.net/forecast/d090ad71e840a71b480a0e2443977dab/${lat},${long}?units=${units}`;\n\t\tconst response = await fetch(weatherAPI);\n\n\t\tif (response.ok) {\n\t\t\tconst data = await response.json();\n\t\t\tsetLocation(data);\n\t\t\tsetLoading(false);\n\t\t}\n\t};\n\n\tconst reverseGeocoding = async () => {\n\t\tconst reverseAPI = `https://api.opencagedata.com/geocode/v1/json?q=${lat}+${long}&key=d6d274c390434a5da83e82945466c21a`;\n\t\tconst response = await fetch(reverseAPI);\n\n\t\tif (response.ok) {\n\t\t\tconst data = await response.json();\n\n\t\t\tif (\n\t\t\t\t!data.results[0].components.city &&\n\t\t\t\t!data.results[0].components.village\n\t\t\t) {\n\t\t\t\tsetCityName(data.results[0].components.town);\n\t\t\t\tsetCountryName(data.results[0].components.country);\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t!data.results[0].components.city &&\n\t\t\t\t!data.results[0].components.town\n\t\t\t) {\n\t\t\t\tsetCityName(data.results[0].components.village);\n\t\t\t\tsetCountryName(data.results[0].components.country);\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t!data.results[0].components.town &&\n\t\t\t\t!data.results[0].components.village\n\t\t\t) {\n\t\t\t\tsetCityName(data.results[0].components.city);\n\t\t\t\tsetCountryName(data.results[0].components.country);\n\t\t\t}\n\t\t}\n\t};\n\n\tconst contentHolder = !loading ? (\n\t\t<>\n\t\t\t<div className={styles.Days}>\n\t\t\t\t{location.daily.data.map((day, index) => {\n\t\t\t\t\tlet dayOfWeek = formatDate(day.time);\n\n\t\t\t\t\tif (index == 0) {\n\t\t\t\t\t\tdayOfWeek = 'Today';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (index == 1) {\n\t\t\t\t\t\tdayOfWeek = 'Tomorrow';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Day\n\t\t\t\t\t\t\tkey={day.time}\n\t\t\t\t\t\t\tid={day.time}\n\t\t\t\t\t\t\tday={dayOfWeek}\n\t\t\t\t\t\t\ticon={weatherIcon(day.icon)}\n\t\t\t\t\t\t\ttemperatureHigh={Math.round(day.temperatureHigh)}\n\t\t\t\t\t\t\ttemperatureLow={Math.round(day.temperatureLow)}\n\t\t\t\t\t\t\tsummary={day.summary}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</>\n\t) : (\n\t\t<Spinner />\n\t);\n\n\treturn (\n\t\t<main className={styles.WeatherBlock}>\n\t\t\t<MainWeather location={location} />\n\n\t\t\t<div className={styles.Content}>{contentHolder}</div>\n\t\t</main>\n\t);\n};\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}