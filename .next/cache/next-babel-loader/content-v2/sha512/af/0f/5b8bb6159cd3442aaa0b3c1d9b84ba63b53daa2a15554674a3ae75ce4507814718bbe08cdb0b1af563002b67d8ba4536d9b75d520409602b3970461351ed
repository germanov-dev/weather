{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useContext, useEffect, useState, useRef } from 'react';\nimport { AppContext } from '../../context/AppContext';\nimport { useRouter } from 'next/router';\nimport Image from 'next/image';\nimport Spinner from '../../components/Spinner/Spinner';\nimport styles from '../../styles/DetailedWeather.module.css';\n\nconst DetailedWeather = () => {\n  const {\n    lat,\n    long,\n    units,\n    cityName,\n    countryName,\n    reverseGeocoding,\n    weatherIcon,\n    formatTime,\n    windDirection,\n    weather,\n    setWeather,\n    setClassBackground\n  } = useContext(AppContext);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: hourIndex,\n    1: setHourIndex\n  } = useState(0);\n  const router = useRouter();\n  const {\n    day\n  } = router.query;\n  const chartSelector = useRef();\n  const chartContainer = useRef();\n  const chartBlock = useRef();\n  useEffect(() => {\n    if (day != undefined) {\n      getDetailedWeather();\n      reverseGeocoding();\n    }\n  }, [day, units]);\n\n  const getDetailedWeather = async () => {\n    const res = await fetch(`https://api.darksky.net/forecast/d090ad71e840a71b480a0e2443977dab/${lat},${long},${day}?units=${units}`);\n\n    if (res.ok) {\n      const data = await res.json();\n      setWeather(data);\n      setClassBackground(data.hourly.icon);\n      setLoading(false);\n    }\n  };\n\n  const formatDate = timestamp => {\n    const fullDate = new Date(timestamp * 1000);\n    let day = fullDate.getDay();\n    const date = fullDate.getDate();\n    let month = fullDate.getMonth();\n    const year = fullDate.getFullYear();\n\n    switch (day) {\n      case 0:\n        day = 'Sunday';\n        break;\n\n      case 1:\n        day = 'Monday';\n        break;\n\n      case 2:\n        day = 'Tuesday';\n        break;\n\n      case 3:\n        day = 'Wednesday';\n        break;\n\n      case 4:\n        day = 'Thursday';\n        break;\n\n      case 5:\n        day = 'Friday';\n        break;\n\n      case 6:\n        day = 'Saturday';\n\n      default:\n        break;\n    }\n\n    switch (month) {\n      case 0:\n        month = 'January';\n        break;\n\n      case 1:\n        month = 'February';\n        break;\n\n      case 2:\n        month = 'March';\n        break;\n\n      case 3:\n        month = 'April';\n        break;\n\n      case 4:\n        month = 'May';\n        break;\n\n      case 5:\n        month = 'June';\n        break;\n\n      case 6:\n        month = 'July';\n        break;\n\n      case 7:\n        month = 'August';\n        break;\n\n      case 8:\n        month = 'September';\n        break;\n\n      case 9:\n        month = 'October';\n        break;\n\n      case 10:\n        month = 'November';\n        break;\n\n      case 11:\n        month = 'December';\n        break;\n\n      default:\n        break;\n    }\n\n    return `${day}, ${date} ${month} ${year}`;\n  };\n\n  const moonPhaseHandler = phase => {\n    switch (true) {\n      case phase > 0 && phase <= 0.12:\n        return /*#__PURE__*/_jsx(Image, {\n          src: \"/moon-phase-1.svg\",\n          width: 21,\n          height: 21\n        });\n\n      case phase > 0.12 && phase <= 0.25:\n        return /*#__PURE__*/_jsx(Image, {\n          src: \"/moon-phase-2.svg\",\n          width: 21,\n          height: 21\n        });\n\n      case phase > 0.25 && phase <= 0.37:\n        return /*#__PURE__*/_jsx(Image, {\n          src: \"/moon-phase-3.svg\",\n          width: 21,\n          height: 21\n        });\n\n      case phase > 0.37 && phase <= 0.5:\n        return /*#__PURE__*/_jsx(Image, {\n          src: \"/moon-phase-4.svg\",\n          width: 21,\n          height: 21\n        });\n\n      case phase > 0.5 && phase <= 0.62:\n        return /*#__PURE__*/_jsx(Image, {\n          src: \"/moon-phase-5.svg\",\n          width: 21,\n          height: 21\n        });\n\n      case phase > 0.62 && phase <= 0.75:\n        return /*#__PURE__*/_jsx(Image, {\n          src: \"/moon-phase-6.svg\",\n          width: 21,\n          height: 21\n        });\n\n      case phase > 0.75 && phase <= 0.87:\n        return /*#__PURE__*/_jsx(Image, {\n          src: \"/moon-phase-7.svg\",\n          width: 21,\n          height: 21\n        });\n\n      case phase > 0.87 && phase <= 1:\n        return /*#__PURE__*/_jsx(Image, {\n          src: \"/moon-phase-8.svg\",\n          width: 21,\n          height: 21\n        });\n\n      default:\n        break;\n    }\n  };\n\n  const mouseMoveSelector = event => {\n    chartSelector.current.style.left = `${event.pageX - chartBlock.current.getBoundingClientRect().left}px`;\n  };\n\n  const dotMouseOverHandler = index => {\n    setHourIndex(index);\n  };\n\n  const detailedWeather = !loading ? /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: styles.DetailedWeather,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        children: [/*#__PURE__*/_jsx(\"button\", {\n          onClick: router.back,\n          className: styles.Back,\n          children: \"Back\"\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: styles.Date,\n          children: formatDate(weather.daily.data[0].time)\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.Location,\n          children: [cityName, \", \", countryName]\n        }), /*#__PURE__*/_jsx(\"div\", {\n          children: weatherIcon(weather.daily.data[0].icon)\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: styles.Summary,\n          children: weather.daily.data[0].summary\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.Row,\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            className: styles.Temp,\n            children: [/*#__PURE__*/_jsx(Image, {\n              src: \"/temp-high.svg\",\n              width: 70,\n              height: 70\n            }), \"High:\", ' ', /*#__PURE__*/_jsxs(\"strong\", {\n              children: [Math.round(weather.daily.data[0].temperatureHigh), \"\\xB0\"]\n            }), ' ', \"at\", ' ', /*#__PURE__*/_jsx(\"strong\", {\n              children: formatTime(weather.daily.data[0].temperatureHighTime)\n            })]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: styles.Temp,\n            children: [/*#__PURE__*/_jsx(Image, {\n              src: \"/temp-low.svg\",\n              width: 70,\n              height: 70\n            }), \"Low:\", ' ', /*#__PURE__*/_jsxs(\"strong\", {\n              children: [Math.round(weather.daily.data[0].temperatureLow), \"\\xB0\"]\n            }), ' ', \"at\", ' ', /*#__PURE__*/_jsx(\"strong\", {\n              children: formatTime(weather.daily.data[0].temperatureLowTime)\n            })]\n          })]\n        })]\n      }), /*#__PURE__*/_jsxs(\"ul\", {\n        className: styles.DetailedList,\n        children: [/*#__PURE__*/_jsxs(\"li\", {\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsx(\"span\", {\n              children: \"Sunrise\"\n            }), /*#__PURE__*/_jsx(\"strong\", {\n              children: formatTime(weather.daily.data[0].sunriseTime)\n            })]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsx(\"span\", {\n              children: \"Sunset\"\n            }), /*#__PURE__*/_jsx(\"strong\", {\n              children: formatTime(weather.daily.data[0].sunsetTime)\n            })]\n          })]\n        }), /*#__PURE__*/_jsxs(\"li\", {\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsx(\"span\", {\n              children: \"Chance of Rain\"\n            }), /*#__PURE__*/_jsxs(\"strong\", {\n              children: [Math.round(weather.daily.data[0].precipProbability * 100), \"%\"]\n            })]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsx(\"span\", {\n              children: \"Humidity\"\n            }), /*#__PURE__*/_jsxs(\"strong\", {\n              children: [Math.round(weather.daily.data[0].humidity * 100), \"%\"]\n            })]\n          })]\n        }), /*#__PURE__*/_jsxs(\"li\", {\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsx(\"span\", {\n              children: \"Precipation\"\n            }), /*#__PURE__*/_jsxs(\"strong\", {\n              children: [Math.round(weather.daily.data[0].precipIntensity * 10), \" cm\"]\n            })]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsx(\"span\", {\n              children: \"Maximum Precipation\"\n            }), /*#__PURE__*/_jsxs(\"strong\", {\n              children: [Math.round(weather.daily.data[0].precipIntensityMax * 10), \" cm\"]\n            })]\n          })]\n        }), /*#__PURE__*/_jsxs(\"li\", {\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsx(\"span\", {\n              children: \"Wind\"\n            }), /*#__PURE__*/_jsxs(\"strong\", {\n              children: [/*#__PURE__*/_jsx(\"span\", {\n                children: windDirection(weather.daily.data[0].windBearing)\n              }), ' ', Math.round(weather.daily.data[0].windSpeed), ' ', units == 'us' ? 'mph' : 'm/s']\n            })]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsx(\"span\", {\n              children: \"Wind Gust\"\n            }), /*#__PURE__*/_jsxs(\"strong\", {\n              children: [Math.round(weather.daily.data[0].windGust), ' ', units == 'us' ? 'mph' : 'm/s']\n            })]\n          })]\n        }), /*#__PURE__*/_jsxs(\"li\", {\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsx(\"span\", {\n              children: \"Visibility\"\n            }), /*#__PURE__*/_jsxs(\"strong\", {\n              children: [Math.round(weather.daily.data[0].visibility), \" km\"]\n            })]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsx(\"span\", {\n              children: \"UV Index\"\n            }), /*#__PURE__*/_jsx(\"strong\", {\n              children: weather.daily.data[0].uvIndex\n            })]\n          })]\n        }), /*#__PURE__*/_jsxs(\"li\", {\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsx(\"span\", {\n              children: \"Ozone\"\n            }), /*#__PURE__*/_jsxs(\"strong\", {\n              children: [weather.daily.data[0].ozone, \" DU\"]\n            })]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsx(\"span\", {\n              children: \"Cloud Cover\"\n            }), /*#__PURE__*/_jsxs(\"strong\", {\n              children: [Math.round(weather.daily.data[0].cloudCover * 100), \"%\"]\n            })]\n          })]\n        }), /*#__PURE__*/_jsxs(\"li\", {\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsx(\"span\", {\n              children: \"Pressure\"\n            }), /*#__PURE__*/_jsxs(\"strong\", {\n              children: [Math.round(weather.daily.data[0].pressure), \" hPa\"]\n            })]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsx(\"span\", {\n              children: \"Moon Phase\"\n            }), /*#__PURE__*/_jsx(\"strong\", {\n              children: moonPhaseHandler(weather.daily.data[0].moonPhase)\n            })]\n          })]\n        })]\n      })]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: styles.HoursHolder,\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        children: [/*#__PURE__*/_jsx(\"h3\", {\n          children: \"Hourly\"\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          ref: chartContainer,\n          className: styles.Chart,\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            className: styles.Temperatures,\n            children: [/*#__PURE__*/_jsxs(\"div\", {\n              className: styles.First,\n              children: [Math.round(weather.daily.data[0].temperatureHigh) + 3, \"\\xB0\"]\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              children: [Math.round(weather.daily.data[0].temperatureHigh), \"\\xB0\"]\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              children: [Math.round((weather.daily.data[0].temperatureHigh + weather.daily.data[0].temperatureLow) / 2), \"\\xB0\"]\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              children: [Math.round(weather.daily.data[0].temperatureLow), \"\\xB0\"]\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: styles.Last,\n              children: [Math.round(weather.daily.data[0].temperatureLow) - 3, \"\\xB0\"]\n            })]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: styles.ChartBody,\n            onMouseMove: mouseMoveSelector,\n            ref: chartBlock,\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              ref: chartSelector,\n              className: styles.Selector\n            }), weather.hourly.data.map((hour, index) => {\n              const degrees = hour.temperature < 0 ? Math.round(weather.daily.data[0].temperatureLow) + -Math.round(weather.daily.data[0].temperatureHigh + 1) : Math.round(weather.daily.data[0].temperatureHigh) - Math.round(weather.daily.data[0].temperatureLow);\n              const degree = Math.round(200 / Math.abs(degrees));\n              const position = (Math.round(hour.temperature) - Math.round(weather.daily.data[0].temperatureLow)) * degree;\n              return /*#__PURE__*/_jsx(\"div\", {\n                onMouseOver: () => dotMouseOverHandler(index),\n                className: styles.DotHolder,\n                style: {\n                  left: `${4.1 * index + 2}%`\n                },\n                children: /*#__PURE__*/_jsx(\"div\", {\n                  style: {\n                    bottom: `${position / 2 + 40}px`\n                  },\n                  className: styles.ChartDot,\n                  children: weatherIcon(hour.icon)\n                })\n              }, hour.time);\n            })]\n          })]\n        }), /*#__PURE__*/_jsxs(\"ul\", {\n          className: styles.HourlyDetails,\n          children: [/*#__PURE__*/_jsxs(\"li\", {\n            children: [/*#__PURE__*/_jsxs(\"div\", {\n              children: [/*#__PURE__*/_jsx(\"span\", {\n                children: \"Time\"\n              }), /*#__PURE__*/_jsx(\"strong\", {\n                children: formatTime(weather.hourly.data[hourIndex].time)\n              })]\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              children: [/*#__PURE__*/_jsx(\"span\", {\n                children: \"Summary\"\n              }), /*#__PURE__*/_jsx(\"strong\", {\n                children: weather.hourly.data[hourIndex].summary\n              })]\n            })]\n          }), /*#__PURE__*/_jsxs(\"li\", {\n            children: [/*#__PURE__*/_jsxs(\"div\", {\n              children: [/*#__PURE__*/_jsx(\"span\", {\n                children: \"Temperature\"\n              }), /*#__PURE__*/_jsxs(\"strong\", {\n                children: [Math.round(weather.hourly.data[hourIndex].temperature), \"\\xB0\"]\n              })]\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              children: [/*#__PURE__*/_jsx(\"span\", {\n                children: \"Feels Like\"\n              }), /*#__PURE__*/_jsxs(\"strong\", {\n                children: [Math.round(weather.hourly.data[hourIndex].apparentTemperature), \"\\xB0\"]\n              })]\n            })]\n          }), /*#__PURE__*/_jsxs(\"li\", {\n            children: [/*#__PURE__*/_jsxs(\"div\", {\n              children: [/*#__PURE__*/_jsx(\"span\", {\n                children: \"Chance of Rain\"\n              }), /*#__PURE__*/_jsxs(\"strong\", {\n                children: [Math.round(weather.hourly.data[hourIndex].precipProbability * 100), \"%\"]\n              })]\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              children: [/*#__PURE__*/_jsx(\"span\", {\n                children: \"Precipation\"\n              }), /*#__PURE__*/_jsxs(\"strong\", {\n                children: [Math.round(weather.hourly.data[hourIndex].precipIntensity * 10), ' ', \"cm\"]\n              })]\n            })]\n          }), /*#__PURE__*/_jsxs(\"li\", {\n            children: [/*#__PURE__*/_jsxs(\"div\", {\n              children: [/*#__PURE__*/_jsx(\"span\", {\n                children: \"Humidiy\"\n              }), /*#__PURE__*/_jsxs(\"strong\", {\n                children: [Math.round(weather.hourly.data[hourIndex].humidity * 100), \"%\"]\n              })]\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              children: [/*#__PURE__*/_jsx(\"span\", {\n                children: \"Wind\"\n              }), /*#__PURE__*/_jsxs(\"strong\", {\n                children: [/*#__PURE__*/_jsx(\"span\", {\n                  children: windDirection(weather.hourly.data[hourIndex].windBearing)\n                }), Math.round(weather.hourly.data[hourIndex].windSpeed), ' ', units == 'us' ? 'mph' : 'm/s']\n              })]\n            })]\n          }), /*#__PURE__*/_jsxs(\"li\", {\n            children: [/*#__PURE__*/_jsxs(\"div\", {\n              children: [/*#__PURE__*/_jsx(\"span\", {\n                children: \"Cloud Cover\"\n              }), /*#__PURE__*/_jsxs(\"strong\", {\n                children: [Math.round(weather.hourly.data[hourIndex].cloudCover * 100), \"%\"]\n              })]\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              children: [/*#__PURE__*/_jsx(\"span\", {\n                children: \"UV Index\"\n              }), /*#__PURE__*/_jsx(\"strong\", {\n                children: weather.hourly.data[hourIndex].uvIndex\n              })]\n            })]\n          }), /*#__PURE__*/_jsxs(\"li\", {\n            children: [/*#__PURE__*/_jsxs(\"div\", {\n              children: [/*#__PURE__*/_jsx(\"span\", {\n                children: \"Pressure\"\n              }), /*#__PURE__*/_jsxs(\"strong\", {\n                children: [Math.round(weather.hourly.data[hourIndex].pressure), \" hPa\"]\n              })]\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              children: [/*#__PURE__*/_jsx(\"span\", {\n                children: \"Visibility\"\n              }), /*#__PURE__*/_jsxs(\"strong\", {\n                children: [Math.round(weather.hourly.data[hourIndex].visibility), \" km\"]\n              })]\n            })]\n          })]\n        })]\n      })\n    })]\n  }) : /*#__PURE__*/_jsx(Spinner, {});\n  return /*#__PURE__*/_jsx(\"main\", {\n    children: detailedWeather\n  });\n};\n\nexport default DetailedWeather;","map":null,"metadata":{},"sourceType":"module"}