{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport Image from 'next/image';\nexport const AppContext = /*#__PURE__*/createContext();\n\nconst AppWrapper = ({\n  children\n}) => {\n  const {\n    0: long,\n    1: setLong\n  } = useState(23.319941);\n  const {\n    0: lat,\n    1: setLat\n  } = useState(42.698334);\n  const {\n    0: search,\n    1: setSearch\n  } = useState('');\n  const {\n    0: query,\n    1: setQuery\n  } = useState('');\n  const {\n    0: dropdownItems,\n    1: setDropdownItems\n  } = useState([]);\n  const {\n    0: dropdownLoading,\n    1: setDropdownLoading\n  } = useState(false);\n  const {\n    0: units,\n    1: setUnits\n  } = useState('si');\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: countryName,\n    1: setCountryName\n  } = useState('');\n  const {\n    0: cityName,\n    1: setCityName\n  } = useState('');\n  const {\n    0: location,\n    1: setLocation\n  } = useState();\n  const {\n    0: weather,\n    1: setWeather\n  } = useState([]);\n  const {\n    0: classBackground,\n    1: setClassBackground\n  } = useState();\n  const {\n    0: backgroundStyle,\n    1: setBackgroundStyle\n  } = useState({\n    color: '#B2FEFA',\n    gradient: 'linear-gradient(to top, #0ED2F7, #B2FEFA)'\n  });\n  useEffect(() => {\n    if (!query == '') {\n      forwardGeocoding();\n    }\n  }, [query]);\n\n  const getUserLocation = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      setLong(position.coords.longitude);\n      setLat(position.coords.latitude);\n    });\n  };\n\n  const updateSearch = event => {\n    setSearch(event.target.value);\n  };\n\n  const getSearch = event => {\n    event.preventDefault();\n    setQuery(search);\n    setDropdownLoading(true);\n  };\n\n  const updateCheckbox = event => {\n    if (event.target.checked == true) {\n      setUnits('us');\n    } else {\n      setUnits('si');\n    }\n  };\n\n  const reverseGeocoding = async () => {\n    const reverseAPI = `https://api.opencagedata.com/geocode/v1/json?q=${lat}+${long}&key=d6d274c390434a5da83e82945466c21a`;\n    const response = await fetch(reverseAPI);\n\n    if (response.ok) {\n      const data = await response.json();\n\n      if (!data.results[0].components.city && !data.results[0].components.village) {\n        setCityName(data.results[0].components.town);\n        setCountryName(data.results[0].components.country);\n      }\n\n      if (!data.results[0].components.city && !data.results[0].components.town) {\n        setCityName(data.results[0].components.village);\n        setCountryName(data.results[0].components.country);\n      }\n\n      if (!data.results[0].components.town && !data.results[0].components.village) {\n        setCityName(data.results[0].components.city);\n        setCountryName(data.results[0].components.country);\n      }\n    }\n  };\n\n  const forwardGeocoding = async () => {\n    const forwardAPI = `https://api.opencagedata.com/geocode/v1/json?q=${query}&key=d6d274c390434a5da83e82945466c21a`;\n    const response = await fetch(forwardAPI);\n\n    if (response.ok) {\n      const data = await response.json();\n      const filteredResults = data.results.filter(result => result.components._type == 'town' || result.components._type == 'city' || result.components._type == 'village');\n      const newResults = filteredResults.filter(result => result.components.town != undefined || result.components.village != undefined || result.components.city != undefined);\n      setDropdownItems(newResults);\n      setDropdownLoading(false);\n    }\n  };\n\n  const weatherIcon = icon => {\n    switch (icon) {\n      case 'clear-day':\n        return /*#__PURE__*/_jsx(Image, {\n          src: \"/clear-day.svg\",\n          width: 150,\n          height: 150\n        });\n\n      case 'clear-night':\n        return /*#__PURE__*/_jsx(Image, {\n          src: \"/clear-night.svg\",\n          width: 150,\n          height: 150\n        });\n\n      case 'rain':\n        return /*#__PURE__*/_jsx(Image, {\n          src: \"/rain.svg\",\n          width: 150,\n          height: 150\n        });\n\n      case 'snow':\n        return /*#__PURE__*/_jsx(Image, {\n          src: \"/snow.svg\",\n          width: 150,\n          height: 150\n        });\n\n      case 'sleet':\n        return /*#__PURE__*/_jsx(Image, {\n          src: \"/sleet.svg\",\n          width: 150,\n          height: 150\n        });\n\n      case 'wind':\n        return /*#__PURE__*/_jsx(Image, {\n          src: \"/wind.svg\",\n          width: 150,\n          height: 150\n        });\n\n      case 'fog':\n        return /*#__PURE__*/_jsx(Image, {\n          src: \"/fog.svg\",\n          width: 150,\n          height: 150\n        });\n\n      case 'cloudy':\n        return /*#__PURE__*/_jsx(Image, {\n          src: \"/cloudy.svg\",\n          width: 150,\n          height: 150\n        });\n\n      case 'partly-cloudy-day':\n        return /*#__PURE__*/_jsx(Image, {\n          src: \"/partly-cloudy-day.svg\",\n          width: 150,\n          height: 150\n        });\n\n      case 'partly-cloudy-night':\n        return /*#__PURE__*/_jsx(Image, {\n          src: \"/partly-cloudy-night.svg\",\n          width: 150,\n          height: 150\n        });\n\n      case 'hail':\n        return /*#__PURE__*/_jsx(Image, {\n          src: \"/hail.svg\",\n          width: 150,\n          height: 150\n        });\n\n      case 'thunderstorm':\n        return /*#__PURE__*/_jsx(Image, {\n          src: \"/thunderstorm.svg\",\n          width: 150,\n          height: 150\n        });\n\n      case 'tornado':\n        return /*#__PURE__*/_jsx(Image, {\n          src: \"/tornado.svg\",\n          width: 150,\n          height: 150\n        });\n\n      default:\n        return;\n    }\n  };\n\n  const formatTime = timestamp => {\n    const date = new Date(timestamp * 1000);\n    const hours = date.getHours();\n    let minutes = date.getMinutes();\n    minutes = minutes <= 9 ? `0${minutes}` : minutes;\n    return `${hours}:${minutes}`;\n  };\n\n  const windDirection = degrees => {\n    switch (true) {\n      case degrees >= 350 && degrees <= 360:\n        return 'N';\n\n      case degrees >= 0 && degrees <= 11:\n        return 'N';\n\n      case degrees >= 12 && degrees <= 34:\n        return 'NNE';\n\n      case degrees >= 35 && degrees <= 56:\n        return 'NE';\n\n      case degrees >= 57 && degrees <= 79:\n        return 'ENE';\n\n      case degrees >= 80 && degrees <= 101:\n        return 'E';\n\n      case degrees >= 102 && degrees <= 124:\n        return 'ESE';\n\n      case degrees >= 125 && degrees <= 146:\n        return 'SE';\n\n      case degrees >= 147 && degrees <= 169:\n        return 'SSE';\n\n      case degrees >= 170 && degrees <= 191:\n        return 'S';\n\n      case degrees >= 192 && degrees <= 214:\n        return 'SSW';\n\n      case degrees >= 215 && degrees <= 236:\n        return 'SW';\n\n      case degrees >= 237 && degrees <= 259:\n        return 'WSW';\n\n      case degrees >= 260 && degrees <= 281:\n        return 'W';\n\n      case degrees >= 282 && degrees <= 304:\n        return 'WNW';\n\n      case degrees >= 305 && degrees <= 326:\n        return 'NW';\n\n      case degrees >= 327 && degrees <= 349:\n        return 'NNW';\n\n      default:\n        break;\n    }\n  };\n\n  return /*#__PURE__*/_jsx(AppContext.Provider, {\n    value: {\n      long,\n      setLong,\n      lat,\n      setLat,\n      search,\n      setSearch,\n      query,\n      setQuery,\n      getUserLocation,\n      updateSearch,\n      getSearch,\n      dropdownItems,\n      dropdownLoading,\n      setDropdownLoading,\n      units,\n      setUnits,\n      updateCheckbox,\n      loading,\n      setLoading,\n      countryName,\n      setCountryName,\n      cityName,\n      setCityName,\n      location,\n      setLocation,\n      weatherIcon,\n      reverseGeocoding,\n      formatTime,\n      windDirection,\n      weather,\n      setWeather,\n      classBackground,\n      setClassBackground,\n      backgroundStyle,\n      setBackgroundStyle\n    },\n    children: children\n  });\n};\n\nexport default AppWrapper;","map":null,"metadata":{},"sourceType":"module"}