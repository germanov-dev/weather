{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/germanov/dev/weather/pages/[day].js\";\nimport { useContext, useEffect, useState } from 'react';\nimport { AppContext } from '../context/AppContext';\nimport { useRouter } from 'next/router';\nimport Spinner from '../components/Spinner/Spinner';\n\nconst DetailedWeather = () => {\n  const {\n    lat,\n    long,\n    units,\n    cityName,\n    countryName,\n    reverseGeocoding\n  } = useContext(AppContext);\n  const {\n    0: weather,\n    1: setWeather\n  } = useState([]);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const router = useRouter();\n  const {\n    day\n  } = router.query;\n  useEffect(() => {\n    if (day != undefined) {\n      getDetailedWeather();\n      reverseGeocoding();\n    }\n  }, [day, units]);\n\n  const getDetailedWeather = async () => {\n    const res = await fetch(`https://api.darksky.net/forecast/d090ad71e840a71b480a0e2443977dab/${lat},${long},${day}?units=${units}`);\n\n    if (res.ok) {\n      const data = await res.json();\n      setWeather(data);\n      setLoading(false);\n      console.log(data);\n    }\n  };\n\n  const detailedWeather = !loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [cityName, \", \", countryName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 3\n  }, this) : /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 3\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: detailedWeather\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\nexport default DetailedWeather;","map":{"version":3,"sources":["/Users/germanov/dev/weather/pages/[day].js"],"names":["useContext","useEffect","useState","AppContext","useRouter","Spinner","DetailedWeather","lat","long","units","cityName","countryName","reverseGeocoding","weather","setWeather","loading","setLoading","router","day","query","undefined","getDetailedWeather","res","fetch","ok","data","json","console","log","detailedWeather"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,QAAhC,QAAgD,OAAhD;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAOC,OAAP,MAAoB,+BAApB;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAC7B,QAAM;AACLC,IAAAA,GADK;AAELC,IAAAA,IAFK;AAGLC,IAAAA,KAHK;AAILC,IAAAA,QAJK;AAKLC,IAAAA,WALK;AAMLC,IAAAA;AANK,MAOFZ,UAAU,CAACG,UAAD,CAPd;AAQA,QAAM;AAAA,OAACU,OAAD;AAAA,OAAUC;AAAV,MAAwBZ,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM;AAAA,OAACa,OAAD;AAAA,OAAUC;AAAV,MAAwBd,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAMe,MAAM,GAAGb,SAAS,EAAxB;AACA,QAAM;AAAEc,IAAAA;AAAF,MAAUD,MAAM,CAACE,KAAvB;AAEAlB,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIiB,GAAG,IAAIE,SAAX,EAAsB;AACrBC,MAAAA,kBAAkB;AAClBT,MAAAA,gBAAgB;AAChB;AACD,GALQ,EAKN,CAACM,GAAD,EAAMT,KAAN,CALM,CAAT;;AAOA,QAAMY,kBAAkB,GAAG,YAAY;AACtC,UAAMC,GAAG,GAAG,MAAMC,KAAK,CACrB,qEAAoEhB,GAAI,IAAGC,IAAK,IAAGU,GAAI,UAAST,KAAM,EADjF,CAAvB;;AAIA,QAAIa,GAAG,CAACE,EAAR,EAAY;AACX,YAAMC,IAAI,GAAG,MAAMH,GAAG,CAACI,IAAJ,EAAnB;AAEAZ,MAAAA,UAAU,CAACW,IAAD,CAAV;AACAT,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA;AACD,GAZD;;AAcA,QAAMI,eAAe,GAAG,CAACd,OAAD,gBACvB;AAAA,2BACC;AAAA,iBACEL,QADF,QACcC,WADd;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADuB,gBAOvB,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UAPD;AAUA,sBAAO;AAAA,cAAOkB;AAAP;AAAA;AAAA;AAAA;AAAA,UAAP;AACA,CA9CD;;AAgDA,eAAevB,eAAf","sourcesContent":["import { useContext, useEffect, useState } from 'react';\nimport { AppContext } from '../context/AppContext';\nimport { useRouter } from 'next/router';\n\nimport Spinner from '../components/Spinner/Spinner';\n\nconst DetailedWeather = () => {\n\tconst {\n\t\tlat,\n\t\tlong,\n\t\tunits,\n\t\tcityName,\n\t\tcountryName,\n\t\treverseGeocoding,\n\t} = useContext(AppContext);\n\tconst [weather, setWeather] = useState([]);\n\tconst [loading, setLoading] = useState(true);\n\tconst router = useRouter();\n\tconst { day } = router.query;\n\n\tuseEffect(() => {\n\t\tif (day != undefined) {\n\t\t\tgetDetailedWeather();\n\t\t\treverseGeocoding();\n\t\t}\n\t}, [day, units]);\n\n\tconst getDetailedWeather = async () => {\n\t\tconst res = await fetch(\n\t\t\t`https://api.darksky.net/forecast/d090ad71e840a71b480a0e2443977dab/${lat},${long},${day}?units=${units}`\n\t\t);\n\n\t\tif (res.ok) {\n\t\t\tconst data = await res.json();\n\n\t\t\tsetWeather(data);\n\t\t\tsetLoading(false);\n\t\t\tconsole.log(data);\n\t\t}\n\t};\n\n\tconst detailedWeather = !loading ? (\n\t\t<div>\n\t\t\t<div>\n\t\t\t\t{cityName}, {countryName}\n\t\t\t</div>\n\t\t</div>\n\t) : (\n\t\t<Spinner />\n\t);\n\n\treturn <main>{detailedWeather}</main>;\n};\n\nexport default DetailedWeather;\n"]},"metadata":{},"sourceType":"module"}