{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/germanov/dev/weather/components/Weather/Weather.js\";\nimport { useState, useEffect } from 'react';\n\nconst Weather = () => {\n  const {\n    0: long,\n    1: setLong\n  } = useState(1.9425864);\n  const {\n    0: lat,\n    1: setLat\n  } = useState(5.2152716);\n  const {\n    0: location,\n    1: setLocation\n  } = useState([]);\n  const {\n    0: locationName,\n    1: setLocationName\n  } = useState();\n  useEffect(() => {\n    getLocationData();\n  }, [lat, long]);\n\n  const getUserLocation = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      setLong(position.coords.longitude);\n      setLat(position.coords.latitude);\n    });\n  };\n\n  const getLocationData = async () => {\n    const proxy = 'https://cors-anywhere.herokuapp.com/'; // const weatherAPI = `${proxy}https://api.darksky.net/forecast/d090ad71e840a71b480a0e2443977dab/${lat},${long}?units=si`;\n\n    const weatherAPI = `${proxy}https://api.darksky.net/forecast/d090ad71e840a71b480a0e2443977dab/37.8267,-122.4233`;\n\n    try {\n      const response = await fetch(weatherAPI);\n      const data = await response.json();\n      console.log(DataView);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 3\n  }, this);\n};\n\nexport default Weather;","map":{"version":3,"sources":["/Users/germanov/dev/weather/components/Weather/Weather.js"],"names":["useState","useEffect","Weather","long","setLong","lat","setLat","location","setLocation","locationName","setLocationName","getLocationData","getUserLocation","navigator","geolocation","getCurrentPosition","position","coords","longitude","latitude","proxy","weatherAPI","response","fetch","data","json","console","log","DataView","error"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,OAAO,GAAG,MAAM;AACrB,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBJ,QAAQ,CAAC,SAAD,CAAhC;AACA,QAAM;AAAA,OAACK,GAAD;AAAA,OAAMC;AAAN,MAAgBN,QAAQ,CAAC,SAAD,CAA9B;AACA,QAAM;AAAA,OAACO,QAAD;AAAA,OAAWC;AAAX,MAA0BR,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAA,OAACS,YAAD;AAAA,OAAeC;AAAf,MAAkCV,QAAQ,EAAhD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACfU,IAAAA,eAAe;AACf,GAFQ,EAEN,CAACN,GAAD,EAAMF,IAAN,CAFM,CAAT;;AAIA,QAAMS,eAAe,GAAG,MAAM;AAC7BC,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,QAAD,IAAc;AACtDZ,MAAAA,OAAO,CAACY,QAAQ,CAACC,MAAT,CAAgBC,SAAjB,CAAP;AACAZ,MAAAA,MAAM,CAACU,QAAQ,CAACC,MAAT,CAAgBE,QAAjB,CAAN;AACA,KAHD;AAIA,GALD;;AAOA,QAAMR,eAAe,GAAG,YAAY;AACnC,UAAMS,KAAK,GAAG,sCAAd,CADmC,CAEnC;;AACA,UAAMC,UAAU,GAAI,GAAED,KAAM,qFAA5B;;AAEA,QAAI;AACH,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,UAAD,CAA5B;AACA,YAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;AACA,KAJD,CAIE,OAAOC,KAAP,EAAc;AACfH,MAAAA,OAAO,CAACG,KAAR,CAAcA,KAAd;AACA;AACD,GAZD;;AAcA,sBACC;AAAA,4BACC;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YADD,eAGC;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAHD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAOA,CAtCD;;AAwCA,eAAe3B,OAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst Weather = () => {\n\tconst [long, setLong] = useState(1.9425864);\n\tconst [lat, setLat] = useState(5.2152716);\n\tconst [location, setLocation] = useState([]);\n\tconst [locationName, setLocationName] = useState();\n\n\tuseEffect(() => {\n\t\tgetLocationData();\n\t}, [lat, long]);\n\n\tconst getUserLocation = () => {\n\t\tnavigator.geolocation.getCurrentPosition((position) => {\n\t\t\tsetLong(position.coords.longitude);\n\t\t\tsetLat(position.coords.latitude);\n\t\t});\n\t};\n\n\tconst getLocationData = async () => {\n\t\tconst proxy = 'https://cors-anywhere.herokuapp.com/';\n\t\t// const weatherAPI = `${proxy}https://api.darksky.net/forecast/d090ad71e840a71b480a0e2443977dab/${lat},${long}?units=si`;\n\t\tconst weatherAPI = `${proxy}https://api.darksky.net/forecast/d090ad71e840a71b480a0e2443977dab/37.8267,-122.4233`;\n\n\t\ttry {\n\t\t\tconst response = await fetch(weatherAPI);\n\t\t\tconst data = await response.json();\n\t\t\tconsole.log(DataView);\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t};\n\n\treturn (\n\t\t<main>\n\t\t\t<div className='content'></div>\n\n\t\t\t<div className='sidebar'></div>\n\t\t</main>\n\t);\n};\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}