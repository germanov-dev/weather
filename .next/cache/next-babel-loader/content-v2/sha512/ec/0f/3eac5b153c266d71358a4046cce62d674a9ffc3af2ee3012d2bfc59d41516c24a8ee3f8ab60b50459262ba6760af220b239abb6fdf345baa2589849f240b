{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/germanov/dev/weather/context/AppContext.js\";\nimport { createContext, useContext, useState } from 'react';\nexport const AppContext = /*#__PURE__*/createContext();\n\nconst AppWrapper = ({\n  children\n}) => {\n  const {\n    0: long,\n    1: setLong\n  } = useState(1);\n  const {\n    0: lat,\n    1: setLat\n  } = useState(2);\n\n  const getUserLocation = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      setLong(position.coords.longitude);\n      setLat(position.coords.latitude);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      long,\n      lat,\n      getUserLocation\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 3\n  }, this);\n};\n\nexport default AppWrapper;","map":{"version":3,"sources":["/Users/germanov/dev/weather/context/AppContext.js"],"names":["createContext","useContext","useState","AppContext","AppWrapper","children","long","setLong","lat","setLat","getUserLocation","navigator","geolocation","getCurrentPosition","position","coords","longitude","latitude"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,QAAoD,OAApD;AAEA,OAAO,MAAMC,UAAU,gBAAGH,aAAa,EAAhC;;AAEP,MAAMI,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACpC,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBL,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM;AAAA,OAACM,GAAD;AAAA,OAAMC;AAAN,MAAgBP,QAAQ,CAAC,CAAD,CAA9B;;AAEA,QAAMQ,eAAe,GAAG,MAAM;AAC7BC,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,QAAD,IAAc;AACtDP,MAAAA,OAAO,CAACO,QAAQ,CAACC,MAAT,CAAgBC,SAAjB,CAAP;AACAP,MAAAA,MAAM,CAACK,QAAQ,CAACC,MAAT,CAAgBE,QAAjB,CAAN;AACA,KAHD;AAIA,GALD;;AAOA,sBACC,QAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAE;AAACX,MAAAA,IAAD;AAAOE,MAAAA,GAAP;AAAYE,MAAAA;AAAZ,KAA5B;AAAA,cAA2DL;AAA3D;AAAA;AAAA;AAAA;AAAA,UADD;AAGA,CAdD;;AAgBA,eAAeD,UAAf","sourcesContent":["import { createContext, useContext, useState } from 'react';\n\nexport const AppContext = createContext();\n\nconst AppWrapper = ({ children }) => {\n\tconst [long, setLong] = useState(1);\n\tconst [lat, setLat] = useState(2);\n\n\tconst getUserLocation = () => {\n\t\tnavigator.geolocation.getCurrentPosition((position) => {\n\t\t\tsetLong(position.coords.longitude);\n\t\t\tsetLat(position.coords.latitude);\n\t\t});\n\t};\n\n\treturn (\n\t\t<AppContext.Provider value={{long, lat, getUserLocation}}>{children}</AppContext.Provider>\n\t);\n}\n\nexport default AppWrapper;"]},"metadata":{},"sourceType":"module"}