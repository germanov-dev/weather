{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/germanov/dev/weather/context/AppContext.js\";\nimport { createContext, useContext, useState, useEffect } from 'react';\nexport const AppContext = /*#__PURE__*/createContext();\n\nconst AppWrapper = ({\n  children\n}) => {\n  const {\n    0: long,\n    1: setLong\n  } = useState(23.319941);\n  const {\n    0: lat,\n    1: setLat\n  } = useState(42.698334);\n  const {\n    0: search,\n    1: setSearch\n  } = useState('');\n  const {\n    0: query,\n    1: setQuery\n  } = useState('');\n  const {\n    0: dropdownItems,\n    1: setDropdownItems\n  } = useState([]);\n  const {\n    0: dropdownLoading,\n    1: setDropdownLoading\n  } = useState(false);\n  console.log();\n  useEffect(() => {\n    if (!query == '') {\n      forwardGeocoding();\n    }\n  }, [query]);\n\n  const getUserLocation = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      setLong(position.coords.longitude);\n      setLat(position.coords.latitude);\n    });\n  };\n\n  const updateSearch = event => {\n    setSearch(event.target.value);\n  };\n\n  const getSearch = event => {\n    event.preventDefault();\n    setQuery(search);\n  };\n\n  const forwardGeocoding = async () => {\n    const forwardAPI = `https://api.opencagedata.com/geocode/v1/json?q=${query}&key=d6d274c390434a5da83e82945466c21a`;\n    const response = await fetch(forwardAPI);\n\n    if (response.ok) {\n      const data = await response.json();\n      setDropdownItems(data.results);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      long,\n      setLong,\n      lat,\n      setLat,\n      search,\n      query,\n      getUserLocation,\n      updateSearch,\n      getSearch,\n      dropdownItems\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 3\n  }, this);\n};\n\nexport default AppWrapper;","map":{"version":3,"sources":["/Users/germanov/dev/weather/context/AppContext.js"],"names":["createContext","useContext","useState","useEffect","AppContext","AppWrapper","children","long","setLong","lat","setLat","search","setSearch","query","setQuery","dropdownItems","setDropdownItems","dropdownLoading","setDropdownLoading","console","log","forwardGeocoding","getUserLocation","navigator","geolocation","getCurrentPosition","position","coords","longitude","latitude","updateSearch","event","target","value","getSearch","preventDefault","forwardAPI","response","fetch","ok","data","json","results"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,EAA8CC,SAA9C,QAA+D,OAA/D;AAEA,OAAO,MAAMC,UAAU,gBAAGJ,aAAa,EAAhC;;AAEP,MAAMK,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACpC,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBN,QAAQ,CAAC,SAAD,CAAhC;AACA,QAAM;AAAA,OAACO,GAAD;AAAA,OAAMC;AAAN,MAAgBR,QAAQ,CAAC,SAAD,CAA9B;AACA,QAAM;AAAA,OAACS,MAAD;AAAA,OAASC;AAAT,MAAsBV,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAA,OAACW,KAAD;AAAA,OAAQC;AAAR,MAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACa,aAAD;AAAA,OAAgBC;AAAhB,MAAoCd,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM;AAAA,OAACe,eAAD;AAAA,OAAkBC;AAAlB,MAAwChB,QAAQ,CAAC,KAAD,CAAtD;AAEAiB,EAAAA,OAAO,CAACC,GAAR;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACf,QAAI,CAACU,KAAD,IAAU,EAAd,EAAkB;AACjBQ,MAAAA,gBAAgB;AAChB;AACD,GAJQ,EAIN,CAACR,KAAD,CAJM,CAAT;;AAMA,QAAMS,eAAe,GAAG,MAAM;AAC7BC,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,QAAD,IAAc;AACtDlB,MAAAA,OAAO,CAACkB,QAAQ,CAACC,MAAT,CAAgBC,SAAjB,CAAP;AACAlB,MAAAA,MAAM,CAACgB,QAAQ,CAACC,MAAT,CAAgBE,QAAjB,CAAN;AACA,KAHD;AAIA,GALD;;AAOA,QAAMC,YAAY,GAAIC,KAAD,IAAW;AAC/BnB,IAAAA,SAAS,CAACmB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAT;AACA,GAFD;;AAIA,QAAMC,SAAS,GAAIH,KAAD,IAAW;AAC5BA,IAAAA,KAAK,CAACI,cAAN;AACArB,IAAAA,QAAQ,CAACH,MAAD,CAAR;AACA,GAHD;;AAKA,QAAMU,gBAAgB,GAAG,YAAY;AACpC,UAAMe,UAAU,GAAI,kDAAiDvB,KAAM,uCAA3E;AACA,UAAMwB,QAAQ,GAAG,MAAMC,KAAK,CAACF,UAAD,CAA5B;;AAEA,QAAIC,QAAQ,CAACE,EAAb,EAAiB;AAChB,YAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;AAEAzB,MAAAA,gBAAgB,CAACwB,IAAI,CAACE,OAAN,CAAhB;AACA;AACD,GATD;;AAWA,sBACC,QAAC,UAAD,CAAY,QAAZ;AACC,IAAA,KAAK,EAAE;AACNnC,MAAAA,IADM;AAENC,MAAAA,OAFM;AAGNC,MAAAA,GAHM;AAINC,MAAAA,MAJM;AAKNC,MAAAA,MALM;AAMNE,MAAAA,KANM;AAONS,MAAAA,eAPM;AAQNQ,MAAAA,YARM;AASNI,MAAAA,SATM;AAUNnB,MAAAA;AAVM,KADR;AAAA,cAaET;AAbF;AAAA;AAAA;AAAA;AAAA,UADD;AAiBA,CA5DD;;AA8DA,eAAeD,UAAf","sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\n\nexport const AppContext = createContext();\n\nconst AppWrapper = ({ children }) => {\n\tconst [long, setLong] = useState(23.319941);\n\tconst [lat, setLat] = useState(42.698334);\n\tconst [search, setSearch] = useState('');\n\tconst [query, setQuery] = useState('');\n\tconst [dropdownItems, setDropdownItems] = useState([]);\n\tconst [dropdownLoading, setDropdownLoading] = useState(false);\n\n\tconsole.log();\n\n\tuseEffect(() => {\n\t\tif (!query == '') {\n\t\t\tforwardGeocoding();\n\t\t}\n\t}, [query]);\n\n\tconst getUserLocation = () => {\n\t\tnavigator.geolocation.getCurrentPosition((position) => {\n\t\t\tsetLong(position.coords.longitude);\n\t\t\tsetLat(position.coords.latitude);\n\t\t});\n\t};\n\n\tconst updateSearch = (event) => {\n\t\tsetSearch(event.target.value);\n\t};\n\n\tconst getSearch = (event) => {\n\t\tevent.preventDefault();\n\t\tsetQuery(search);\n\t};\n\n\tconst forwardGeocoding = async () => {\n\t\tconst forwardAPI = `https://api.opencagedata.com/geocode/v1/json?q=${query}&key=d6d274c390434a5da83e82945466c21a`;\n\t\tconst response = await fetch(forwardAPI);\n\n\t\tif (response.ok) {\n\t\t\tconst data = await response.json();\n\n\t\t\tsetDropdownItems(data.results);\n\t\t}\n\t};\n\n\treturn (\n\t\t<AppContext.Provider\n\t\t\tvalue={{\n\t\t\t\tlong,\n\t\t\t\tsetLong,\n\t\t\t\tlat,\n\t\t\t\tsetLat,\n\t\t\t\tsearch,\n\t\t\t\tquery,\n\t\t\t\tgetUserLocation,\n\t\t\t\tupdateSearch,\n\t\t\t\tgetSearch,\n\t\t\t\tdropdownItems,\n\t\t\t}}>\n\t\t\t{children}\n\t\t</AppContext.Provider>\n\t);\n};\n\nexport default AppWrapper;\n"]},"metadata":{},"sourceType":"module"}