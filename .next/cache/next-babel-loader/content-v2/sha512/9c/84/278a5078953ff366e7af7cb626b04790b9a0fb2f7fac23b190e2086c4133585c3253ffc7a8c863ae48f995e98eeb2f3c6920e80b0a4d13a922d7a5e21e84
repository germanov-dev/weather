{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/germanov/dev/weather/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/germanov/dev/weather/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/germanov/dev/weather/components/Weather/Weather.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nvar Weather = function Weather() {\n  _s();\n\n  var _useState = useState(1.9425864),\n      _long = _useState[0],\n      setLong = _useState[1];\n\n  var _useState2 = useState(5.2152716),\n      lat = _useState2[0],\n      setLat = _useState2[1];\n\n  var _useState3 = useState(),\n      location = _useState3[0],\n      setLocation = _useState3[1];\n\n  var _useState4 = useState(),\n      locationName = _useState4[0],\n      setLocationName = _useState4[1];\n\n  useEffect(function () {\n    getLocationData();\n    console.log(location);\n  }, [lat, _long]);\n\n  var getUserLocation = function getUserLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        setLong(position.coords.longitude);\n        setLat(position.coords.latitude);\n      });\n    } else {\n      return;\n    }\n  };\n\n  var getLocationData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var weatherAPI, response, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // const proxy = 'https://cors-anywhere.herokuapp.com/';\n              weatherAPI = \"https://api.darksky.net/forecast/d090ad71e840a71b480a0e2443977dab/\".concat(lat, \",\").concat(_long, \"?units=si\");\n              _context.next = 3;\n              return fetch(weatherAPI);\n\n            case 3:\n              response = _context.sent;\n              _context.next = 6;\n              return response.json();\n\n            case 6:\n              data = _context.sent;\n              setLocation(data);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getLocationData() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 4\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 3\n  }, _this);\n};\n\n_s(Weather, \"Q7pgbaEmf7K0zXqsfibzbvIcesU=\");\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["/Users/germanov/dev/weather/components/Weather/Weather.js"],"names":["useState","useEffect","Weather","long","setLong","lat","setLat","location","setLocation","locationName","setLocationName","getLocationData","console","log","getUserLocation","navigator","geolocation","getCurrentPosition","position","coords","longitude","latitude","weatherAPI","fetch","response","json","data"],"mappings":";;;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAAA;;AAAA,kBACGF,QAAQ,CAAC,SAAD,CADX;AAAA,MACdG,KADc;AAAA,MACRC,OADQ;;AAAA,mBAECJ,QAAQ,CAAC,SAAD,CAFT;AAAA,MAEdK,GAFc;AAAA,MAETC,MAFS;;AAAA,mBAGWN,QAAQ,EAHnB;AAAA,MAGdO,QAHc;AAAA,MAGJC,WAHI;;AAAA,mBAImBR,QAAQ,EAJ3B;AAAA,MAIdS,YAJc;AAAA,MAIAC,eAJA;;AAMrBT,EAAAA,SAAS,CAAC,YAAM;AACfU,IAAAA,eAAe;AAEfC,IAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AACA,GAJQ,EAIN,CAACF,GAAD,EAAMF,KAAN,CAJM,CAAT;;AAMA,MAAMW,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC7B,QAAIC,SAAS,CAACC,WAAd,EAA2B;AAC1BD,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAAAC,QAAQ,EAAI;AACpDd,QAAAA,OAAO,CAACc,QAAQ,CAACC,MAAT,CAAgBC,SAAjB,CAAP;AACAd,QAAAA,MAAM,CAACY,QAAQ,CAACC,MAAT,CAAgBE,QAAjB,CAAN;AACA,OAHD;AAIA,KALD,MAKO;AACN;AACA;AACD,GATD;;AAWA,MAAMV,eAAe;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACvB;AACMW,cAAAA,UAFiB,+EAEiEjB,GAFjE,cAEwEF,KAFxE;AAAA;AAAA,qBAIAoB,KAAK,CAACD,UAAD,CAJL;;AAAA;AAIjBE,cAAAA,QAJiB;AAAA;AAAA,qBAKJA,QAAQ,CAACC,IAAT,EALI;;AAAA;AAKjBC,cAAAA,IALiB;AAMvBlB,cAAAA,WAAW,CAACkB,IAAD,CAAX;;AANuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAff,eAAe;AAAA;AAAA;AAAA,KAArB;;AASA,sBACC;AAAA,4BACC;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,aADD,eAGC;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,aAHD;AAAA;AAAA;AAAA;AAAA;AAAA,WADD;AAOA,CAvCD;;GAAMT,O;;KAAAA,O;AAyCN,eAAeA,OAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst Weather = () => {\n\tconst [long, setLong] = useState(1.9425864);\n\tconst [lat, setLat] = useState(5.2152716);\n\tconst [location, setLocation] = useState();\n\tconst [locationName, setLocationName] = useState();\n\n\tuseEffect(() => {\n\t\tgetLocationData();\n\n\t\tconsole.log(location)\n\t}, [lat, long]);\n\n\tconst getUserLocation = () => {\n\t\tif (navigator.geolocation) {\n\t\t\tnavigator.geolocation.getCurrentPosition(position => {\n\t\t\t\tsetLong(position.coords.longitude);\n\t\t\t\tsetLat(position.coords.latitude);\n\t\t\t})\t\n\t\t} else {\n\t\t\treturn\n\t\t}\n\t}\n\n\tconst getLocationData = async () => {\n\t\t// const proxy = 'https://cors-anywhere.herokuapp.com/';\n\t\tconst weatherAPI = `https://api.darksky.net/forecast/d090ad71e840a71b480a0e2443977dab/${lat},${long}?units=si`;\n\n\t\tconst response = await fetch(weatherAPI);\n\t\tconst data = await response.json();\n\t\tsetLocation(data);\n\t};\n\n\treturn (\n\t\t<main>\n\t\t\t<div className=\"content\"></div>\n\n\t\t\t<div className=\"sidebar\"></div>\n\t\t</main>\n\t);\n};\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}