{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/germanov/dev/weather/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/germanov/dev/weather/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/germanov/dev/weather/components/Weather/Weather.js\",\n    _this = this;\n\nimport { useState, useEffect } from 'react';\n\nvar _useState = useState(27.9425864),\n    _long = _useState[0],\n    setLong = _useState[1];\n\nvar _useState2 = useState(43.2152716),\n    lat = _useState2[0],\n    setLat = _useState2[1];\n\nvar _useState3 = useState([]),\n    location = _useState3[0],\n    setLocation = _useState3[1];\n\nvar _useState4 = useState(),\n    locationName = _useState4[0],\n    setLocationName = _useState4[1];\n\nvar getLocation = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var proxy, weatherAPI, response, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            proxy = 'https://cors-anywhere.herokuapp.com/';\n            weatherAPI = \"\".concat(proxy, \"https://api.darksky.net/forecast/d090ad71e840a71b480a0e2443977dab/\").concat(lat, \",\").concat(_long, \"?units=si&lang=bg\");\n            _context.next = 4;\n            return fetch(weatherAPI);\n\n          case 4:\n            response = _context.sent;\n            _context.next = 7;\n            return response.json();\n\n          case 7:\n            data = _context.sent;\n            return _context.abrupt(\"return\", {\n              props: {\n                location: data\n              }\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getLocation() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar getLocationName = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var reverseLocation, response, data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            reverseLocation = \"https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=\".concat(lat, \"&lon=\").concat(_long, \"&zoom=18&addressdetails=1\");\n            _context2.next = 3;\n            return fetch(reverseLocation);\n\n          case 3:\n            response = _context2.sent;\n            _context2.next = 6;\n            return response.json();\n\n          case 6:\n            data = _context2.sent;\n            setLocationName(data);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getLocationName() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar Weather = function Weather() {\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"content\", {\n      children: console.log(location)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 4\n    }, _this), /*#__PURE__*/_jsxDEV(\"sidebar\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 4\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 3\n  }, _this);\n};\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["/Users/germanov/dev/weather/components/Weather/Weather.js"],"names":["useState","useEffect","long","setLong","lat","setLat","location","setLocation","locationName","setLocationName","getLocation","proxy","weatherAPI","fetch","response","json","data","props","getLocationName","reverseLocation","Weather","console","log"],"mappings":";;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;gBAEwBD,QAAQ,CAAC,UAAD,C;IAAzBE,K;IAAMC,O;;iBACSH,QAAQ,CAAC,UAAD,C;IAAvBI,G;IAAKC,M;;iBACoBL,QAAQ,CAAC,EAAD,C;IAAjCM,Q;IAAUC,W;;iBACuBP,QAAQ,E;IAAzCQ,Y;IAAcC,e;;AAErB,IAAMC,WAAW;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,YAAAA,KADa,GACL,sCADK;AAEbC,YAAAA,UAFa,aAEGD,KAFH,+EAE6EP,GAF7E,cAEoFF,KAFpF;AAAA;AAAA,mBAIIW,KAAK,CAACD,UAAD,CAJT;;AAAA;AAIbE,YAAAA,QAJa;AAAA;AAAA,mBAKAA,QAAQ,CAACC,IAAT,EALA;;AAAA;AAKbC,YAAAA,IALa;AAAA,6CAOZ;AACNC,cAAAA,KAAK,EAAE;AAAEX,gBAAAA,QAAQ,EAAEU;AAAZ;AADD,aAPY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXN,WAAW;AAAA;AAAA;AAAA,GAAjB;;AAYA,IAAMQ,eAAe;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,YAAAA,eADiB,2EACkEf,GADlE,kBAC6EF,KAD7E;AAAA;AAAA,mBAGAW,KAAK,CAACM,eAAD,CAHL;;AAAA;AAGjBL,YAAAA,QAHiB;AAAA;AAAA,mBAIJA,QAAQ,CAACC,IAAT,EAJI;;AAAA;AAIjBC,YAAAA,IAJiB;AAMvBP,YAAAA,eAAe,CAACO,IAAD,CAAf;;AANuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfE,eAAe;AAAA;AAAA;AAAA,GAArB;;AASA,IAAME,OAAO,GAAG,SAAVA,OAAU,GAAM;AACrB,sBACC;AAAA,4BACC;AAAA,gBAAUC,OAAO,CAACC,GAAR,CAAYhB,QAAZ;AAAV;AAAA;AAAA;AAAA;AAAA,aADD,eAGC;AAAA;AAAA;AAAA;AAAA,aAHD;AAAA;AAAA;AAAA;AAAA;AAAA,WADD;AAOA,CARD;;KAAMc,O;AAUN,eAAeA,OAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst [long, setLong] = useState(27.9425864);\nconst [lat, setLat] = useState(43.2152716);\nconst [location, setLocation] = useState([]);\nconst [locationName, setLocationName] = useState();\n\nconst getLocation = async () => {\n\tconst proxy = 'https://cors-anywhere.herokuapp.com/';\n\tconst weatherAPI = `${proxy}https://api.darksky.net/forecast/d090ad71e840a71b480a0e2443977dab/${lat},${long}?units=si&lang=bg`;\n\n\tconst response = await fetch(weatherAPI);\n\tconst data = await response.json();\n\n\treturn {\n\t\tprops: { location: data },\n\t};\n};\n\nconst getLocationName = async () => {\n\tconst reverseLocation = `https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${long}&zoom=18&addressdetails=1`;\n\n\tconst response = await fetch(reverseLocation);\n\tconst data = await response.json();\n\n\tsetLocationName(data);\n};\n\nconst Weather = () => {\n\treturn (\n\t\t<main>\n\t\t\t<content>{console.log(location)}</content>\n\n\t\t\t<sidebar></sidebar>\n\t\t</main>\n\t);\n};\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}