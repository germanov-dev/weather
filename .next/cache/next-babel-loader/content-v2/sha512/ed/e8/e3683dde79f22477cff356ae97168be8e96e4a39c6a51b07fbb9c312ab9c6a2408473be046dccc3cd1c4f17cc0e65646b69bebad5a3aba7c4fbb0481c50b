{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/germanov/dev/weather/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/germanov/dev/weather/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/germanov/dev/weather/pages/[day].js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState } from 'react';\nimport { AppContext } from '../context/AppContext';\nimport { useRouter } from 'next/router';\nimport Spinner from '../components/Spinner/Spinner';\n\nvar DetailedWeather = function DetailedWeather() {\n  _s();\n\n  var _useContext = useContext(AppContext),\n      lat = _useContext.lat,\n      _long = _useContext[\"long\"],\n      units = _useContext.units,\n      cityName = _useContext.cityName,\n      countryName = _useContext.countryName,\n      reverseGeocoding = _useContext.reverseGeocoding,\n      weatherIcon = _useContext.weatherIcon,\n      formatTime = _useContext.formatTime;\n\n  var _useState = useState([]),\n      weather = _useState[0],\n      setWeather = _useState[1];\n\n  var _useState2 = useState(true),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var router = useRouter();\n  var day = router.query.day;\n  useEffect(function () {\n    if (day != undefined) {\n      getDetailedWeather();\n      reverseGeocoding();\n    }\n  }, [day, units]);\n\n  var getDetailedWeather = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var res, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(\"https://api.darksky.net/forecast/d090ad71e840a71b480a0e2443977dab/\".concat(lat, \",\").concat(_long, \",\").concat(day, \"?units=\").concat(units));\n\n            case 2:\n              res = _context.sent;\n\n              if (!res.ok) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 6;\n              return res.json();\n\n            case 6:\n              data = _context.sent;\n              setWeather(data);\n              setLoading(false);\n              console.log(data);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getDetailedWeather() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var formatDate = function formatDate(timestamp) {\n    var fullDate = new Date(timestamp * 1000);\n    var day = fullDate.getDay();\n    var date = fullDate.getDate();\n    var month = fullDate.getMonth();\n    var year = fullDate.getFullYear();\n\n    switch (day) {\n      case 0:\n        day = 'Sunday';\n        break;\n\n      case 1:\n        day = 'Monday';\n        break;\n\n      case 2:\n        day = 'Tuesday';\n        break;\n\n      case 3:\n        day = 'Wednesday';\n        break;\n\n      case 4:\n        day = 'Thursday';\n        break;\n\n      case 5:\n        day = 'Friday';\n        break;\n\n      case 6:\n        day = 'Saturday';\n\n      default:\n        break;\n    }\n\n    switch (month) {\n      case 0:\n        month = 'January';\n        break;\n\n      case 1:\n        month = 'February';\n        break;\n\n      case 2:\n        month = 'March';\n        break;\n\n      case 3:\n        month = 'April';\n        break;\n\n      case 4:\n        month = 'May';\n        break;\n\n      case 5:\n        month = 'June';\n        break;\n\n      case 6:\n        month = 'July';\n        break;\n\n      case 7:\n        month = 'August';\n        break;\n\n      case 8:\n        month = 'September';\n        break;\n\n      case 9:\n        month = 'October';\n        break;\n\n      case 10:\n        month = 'November';\n        break;\n\n      case 11:\n        month = 'December';\n        break;\n\n      default:\n        break;\n    }\n\n    return \"\".concat(day, \", \").concat(date, \" \").concat(month, \" \").concat(year);\n  };\n\n  var detailedWeather = !loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: formatDate(weather.daily.data[0].time)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 4\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [cityName, \", \", countryName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 4\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: weatherIcon(weather.daily.data[0].icon)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 4\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: weather.daily.data[0].summary\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 4\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: formatTime(weather.daily.data[0].apparentTemperatureHighTime)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [Math.round(weather.daily.data[0].apparentTemperatureHigh), \"\\xB0\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: formatTime(weather.daily.data[0].apparentTemperatureLowTime)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: formatTime(weather.daily.data[0].apparentTemperatureMinTime)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [Math.round(weather.daily.data[0].apparentTemperatureLow), \"\\xB0\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 3\n  }, _this) : /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 3\n  }, _this);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: detailedWeather\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(DetailedWeather, \"K7n6+YLp7AUHVWsDlmv6wGVzFNU=\", false, function () {\n  return [useRouter];\n});\n\n_c = DetailedWeather;\nexport default DetailedWeather;\n\nvar _c;\n\n$RefreshReg$(_c, \"DetailedWeather\");","map":{"version":3,"sources":["/Users/germanov/dev/weather/pages/[day].js"],"names":["useContext","useEffect","useState","AppContext","useRouter","Spinner","DetailedWeather","lat","long","units","cityName","countryName","reverseGeocoding","weatherIcon","formatTime","weather","setWeather","loading","setLoading","router","day","query","undefined","getDetailedWeather","fetch","res","ok","json","data","console","log","formatDate","timestamp","fullDate","Date","getDay","date","getDate","month","getMonth","year","getFullYear","detailedWeather","daily","time","icon","summary","apparentTemperatureHighTime","Math","round","apparentTemperatureHigh","apparentTemperatureLowTime","apparentTemperatureMinTime","apparentTemperatureLow"],"mappings":"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","sourcesContent":["import { useContext, useEffect, useState } from 'react';\nimport { AppContext } from '../context/AppContext';\nimport { useRouter } from 'next/router';\n\nimport Spinner from '../components/Spinner/Spinner';\n\nconst DetailedWeather = () => {\n\tconst {\n\t\tlat,\n\t\tlong,\n\t\tunits,\n\t\tcityName,\n\t\tcountryName,\n\t\treverseGeocoding,\n\t\tweatherIcon,\n        formatTime\n\t} = useContext(AppContext);\n\tconst [weather, setWeather] = useState([]);\n\tconst [loading, setLoading] = useState(true);\n\tconst router = useRouter();\n\tconst { day } = router.query;\n\n\tuseEffect(() => {\n\t\tif (day != undefined) {\n\t\t\tgetDetailedWeather();\n\t\t\treverseGeocoding();\n\t\t}\n\t}, [day, units]);\n\n\tconst getDetailedWeather = async () => {\n\t\tconst res = await fetch(\n\t\t\t`https://api.darksky.net/forecast/d090ad71e840a71b480a0e2443977dab/${lat},${long},${day}?units=${units}`\n\t\t);\n\n\t\tif (res.ok) {\n\t\t\tconst data = await res.json();\n\n\t\t\tsetWeather(data);\n\t\t\tsetLoading(false);\n\t\t\tconsole.log(data);\n\t\t}\n\t};\n\n\tconst formatDate = (timestamp) => {\n\t\tconst fullDate = new Date(timestamp * 1000);\n\t\tlet day = fullDate.getDay();\n\t\tconst date = fullDate.getDate();\n\t\tlet month = fullDate.getMonth();\n\t\tconst year = fullDate.getFullYear();\n\n\t\tswitch (day) {\n\t\t\tcase 0:\n\t\t\t\tday = 'Sunday';\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tday = 'Monday';\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tday = 'Tuesday';\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tday = 'Wednesday';\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tday = 'Thursday';\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tday = 'Friday';\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tday = 'Saturday';\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\tswitch (month) {\n\t\t\tcase 0:\n\t\t\t\tmonth = 'January';\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tmonth = 'February';\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tmonth = 'March';\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tmonth = 'April';\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tmonth = 'May';\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tmonth = 'June';\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tmonth = 'July';\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\tmonth = 'August';\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\tmonth = 'September';\n\t\t\t\tbreak;\n\t\t\tcase 9:\n\t\t\t\tmonth = 'October';\n\t\t\t\tbreak;\n\t\t\tcase 10:\n\t\t\t\tmonth = 'November';\n\t\t\t\tbreak;\n\t\t\tcase 11:\n\t\t\t\tmonth = 'December';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn `${day}, ${date} ${month} ${year}`;\n\t};\n\n\tconst detailedWeather = !loading ? (\n\t\t<div>\n\t\t\t<div>{formatDate(weather.daily.data[0].time)}</div>\n\n\t\t\t<div>\n\t\t\t\t{cityName}, {countryName}\n\t\t\t</div>\n\n\t\t\t<div>{weatherIcon(weather.daily.data[0].icon)}</div>\n\n\t\t\t<div>{weather.daily.data[0].summary}</div>\n\n            <div>{formatTime(weather.daily.data[0].apparentTemperatureHighTime)}</div>\n\n            <div>{Math.round(weather.daily.data[0].apparentTemperatureHigh)}°</div>\n\n            <div>{formatTime(weather.daily.data[0].apparentTemperatureLowTime)}</div>\n            <div>{formatTime(weather.daily.data[0].apparentTemperatureMinTime)}</div>\n\n            <div>{Math.round(weather.daily.data[0].apparentTemperatureLow)}°</div>\n\t\t</div>\n\t) : (\n\t\t<Spinner />\n\t);\n\n\treturn <main>{detailedWeather}</main>;\n};\n\nexport default DetailedWeather;\n"]},"metadata":{},"sourceType":"module"}