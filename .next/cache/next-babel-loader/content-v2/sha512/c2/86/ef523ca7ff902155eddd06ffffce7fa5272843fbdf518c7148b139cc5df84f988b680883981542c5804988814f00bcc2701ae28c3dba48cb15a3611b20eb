{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/germanov/dev/weather/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/germanov/dev/weather/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/germanov/dev/weather/context/AppContext.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { createContext, useContext, useState, useEffect } from 'react';\nexport var AppContext = /*#__PURE__*/createContext();\n\nvar AppWrapper = function AppWrapper(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(23.319941),\n      _long = _useState[0],\n      setLong = _useState[1];\n\n  var _useState2 = useState(42.698334),\n      lat = _useState2[0],\n      setLat = _useState2[1];\n\n  var _useState3 = useState(''),\n      search = _useState3[0],\n      setSearch = _useState3[1];\n\n  var _useState4 = useState(''),\n      query = _useState4[0],\n      setQuery = _useState4[1];\n\n  var _useState5 = useState([]),\n      dropdownItems = _useState5[0],\n      setDropdownItems = _useState5[1];\n\n  console.log(query);\n  useEffect(function () {\n    forwardGeocoding();\n  }, [query]);\n\n  var getUserLocation = function getUserLocation() {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      setLong(position.coords.longitude);\n      setLat(position.coords.latitude);\n    });\n  };\n\n  var updateSearch = function updateSearch(event) {\n    setSearch(event.target.value);\n  };\n\n  var getSearch = function getSearch(event) {\n    event.preventDefault();\n    setQuery(search);\n  };\n\n  var forwardGeocoding = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var forwardAPI, response, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              forwardAPI = \"https://api.opencagedata.com/geocode/v1/json?q=\".concat(query, \"&key=d6d274c390434a5da83e82945466c21a\");\n              _context.next = 3;\n              return fetch(forwardAPI);\n\n            case 3:\n              response = _context.sent;\n\n              if (!response.ok) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 7;\n              return response.json();\n\n            case 7:\n              data = _context.sent;\n              setDropdownItems(data.results);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function forwardGeocoding() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      \"long\": _long,\n      setLong: setLong,\n      lat: lat,\n      setLat: setLat,\n      search: search,\n      query: query,\n      getUserLocation: getUserLocation,\n      updateSearch: updateSearch,\n      getSearch: getSearch,\n      dropdownItems: dropdownItems\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 3\n  }, _this);\n};\n\n_s(AppWrapper, \"mzju9UtQgNpZlqNW33LiJHkfYn0=\");\n\n_c = AppWrapper;\nexport default AppWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppWrapper\");","map":{"version":3,"sources":["/Users/germanov/dev/weather/context/AppContext.js"],"names":["createContext","useContext","useState","useEffect","AppContext","AppWrapper","children","long","setLong","lat","setLat","search","setSearch","query","setQuery","dropdownItems","setDropdownItems","console","log","forwardGeocoding","getUserLocation","navigator","geolocation","getCurrentPosition","position","coords","longitude","latitude","updateSearch","event","target","value","getSearch","preventDefault","forwardAPI","fetch","response","ok","json","data","results"],"mappings":";;;;;;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,EAA8CC,SAA9C,QAA+D,OAA/D;AAEA,OAAO,IAAMC,UAAU,gBAAGJ,aAAa,EAAhC;;AAEP,IAAMK,UAAU,GAAG,SAAbA,UAAa,OAAkB;AAAA;;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,kBACZJ,QAAQ,CAAC,SAAD,CADI;AAAA,MAC7BK,KAD6B;AAAA,MACvBC,OADuB;;AAAA,mBAEdN,QAAQ,CAAC,SAAD,CAFM;AAAA,MAE7BO,GAF6B;AAAA,MAExBC,MAFwB;;AAAA,mBAGRR,QAAQ,CAAC,EAAD,CAHA;AAAA,MAG7BS,MAH6B;AAAA,MAGrBC,SAHqB;;AAAA,mBAIVV,QAAQ,CAAC,EAAD,CAJE;AAAA,MAI7BW,KAJ6B;AAAA,MAItBC,QAJsB;;AAAA,mBAKMZ,QAAQ,CAAC,EAAD,CALd;AAAA,MAK7Ba,aAL6B;AAAA,MAKdC,gBALc;;AAOpCC,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AAEAV,EAAAA,SAAS,CAAC,YAAM;AACfgB,IAAAA,gBAAgB;AAChB,GAFQ,EAEN,CAACN,KAAD,CAFM,CAAT;;AAIA,MAAMO,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC7BC,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAACC,QAAD,EAAc;AACtDhB,MAAAA,OAAO,CAACgB,QAAQ,CAACC,MAAT,CAAgBC,SAAjB,CAAP;AACAhB,MAAAA,MAAM,CAACc,QAAQ,CAACC,MAAT,CAAgBE,QAAjB,CAAN;AACA,KAHD;AAIA,GALD;;AAOA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AAC/BjB,IAAAA,SAAS,CAACiB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAT;AACA,GAFD;;AAIA,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAACH,KAAD,EAAW;AAC5BA,IAAAA,KAAK,CAACI,cAAN;AACAnB,IAAAA,QAAQ,CAACH,MAAD,CAAR;AACA,GAHD;;AAKA,MAAMQ,gBAAgB;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBe,cAAAA,UADkB,4DAC6CrB,KAD7C;AAAA;AAAA,qBAEDsB,KAAK,CAACD,UAAD,CAFJ;;AAAA;AAElBE,cAAAA,QAFkB;;AAAA,mBAIpBA,QAAQ,CAACC,EAJW;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAKJD,QAAQ,CAACE,IAAT,EALI;;AAAA;AAKjBC,cAAAA,IALiB;AAOvBvB,cAAAA,gBAAgB,CAACuB,IAAI,CAACC,OAAN,CAAhB;;AAPuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAhBrB,gBAAgB;AAAA;AAAA;AAAA,KAAtB;;AAWA,sBACC,QAAC,UAAD,CAAY,QAAZ;AACC,IAAA,KAAK,EAAE;AACN,cAAAZ,KADM;AAENC,MAAAA,OAAO,EAAPA,OAFM;AAGNC,MAAAA,GAAG,EAAHA,GAHM;AAINC,MAAAA,MAAM,EAANA,MAJM;AAKNC,MAAAA,MAAM,EAANA,MALM;AAMNE,MAAAA,KAAK,EAALA,KANM;AAONO,MAAAA,eAAe,EAAfA,eAPM;AAQNQ,MAAAA,YAAY,EAAZA,YARM;AASNI,MAAAA,SAAS,EAATA,SATM;AAUNjB,MAAAA,aAAa,EAAbA;AAVM,KADR;AAAA,cAaET;AAbF;AAAA;AAAA;AAAA;AAAA,WADD;AAiBA,CAzDD;;GAAMD,U;;KAAAA,U;AA2DN,eAAeA,UAAf","sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\n\nexport const AppContext = createContext();\n\nconst AppWrapper = ({ children }) => {\n\tconst [long, setLong] = useState(23.319941);\n\tconst [lat, setLat] = useState(42.698334);\n\tconst [search, setSearch] = useState('');\n\tconst [query, setQuery] = useState('');\n\tconst [dropdownItems, setDropdownItems] = useState([]);\n\n\tconsole.log(query);\n\n\tuseEffect(() => {\n\t\tforwardGeocoding();\n\t}, [query]);\n\n\tconst getUserLocation = () => {\n\t\tnavigator.geolocation.getCurrentPosition((position) => {\n\t\t\tsetLong(position.coords.longitude);\n\t\t\tsetLat(position.coords.latitude);\n\t\t});\n\t};\n\n\tconst updateSearch = (event) => {\n\t\tsetSearch(event.target.value);\n\t};\n\n\tconst getSearch = (event) => {\n\t\tevent.preventDefault();\n\t\tsetQuery(search);\n\t};\n\n\tconst forwardGeocoding = async () => {\n\t\tconst forwardAPI = `https://api.opencagedata.com/geocode/v1/json?q=${query}&key=d6d274c390434a5da83e82945466c21a`;\n\t\tconst response = await fetch(forwardAPI);\n\n\t\tif (response.ok) {\n\t\t\tconst data = await response.json();\n\n\t\t\tsetDropdownItems(data.results);\n\t\t}\n\t};\n\n\treturn (\n\t\t<AppContext.Provider\n\t\t\tvalue={{\n\t\t\t\tlong,\n\t\t\t\tsetLong,\n\t\t\t\tlat,\n\t\t\t\tsetLat,\n\t\t\t\tsearch,\n\t\t\t\tquery,\n\t\t\t\tgetUserLocation,\n\t\t\t\tupdateSearch,\n\t\t\t\tgetSearch,\n\t\t\t\tdropdownItems,\n\t\t\t}}>\n\t\t\t{children}\n\t\t</AppContext.Provider>\n\t);\n};\n\nexport default AppWrapper;\n"]},"metadata":{},"sourceType":"module"}