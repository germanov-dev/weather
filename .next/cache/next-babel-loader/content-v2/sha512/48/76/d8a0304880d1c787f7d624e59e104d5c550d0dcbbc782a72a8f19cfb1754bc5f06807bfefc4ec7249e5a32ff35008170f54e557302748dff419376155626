{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/germanov/dev/weather/context/AppContext.js\";\nimport { createContext, useContext, useState, useEffect } from 'react';\nexport const AppContext = /*#__PURE__*/createContext();\n\nconst AppWrapper = ({\n  children\n}) => {\n  const {\n    0: long,\n    1: setLong\n  } = useState(23.319941);\n  const {\n    0: lat,\n    1: setLat\n  } = useState(42.698334);\n  const {\n    0: search,\n    1: setSearch\n  } = useState('');\n  const {\n    0: query,\n    1: setQuery\n  } = useState('');\n  const {\n    0: dropdownItems,\n    1: setDropdownItems\n  } = useState([]);\n  const {\n    0: dropdownLoading,\n    1: setDropdownLoading\n  } = useState(false);\n  const {\n    0: units,\n    1: setUnits\n  } = useState('si');\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: countryName,\n    1: setCountryName\n  } = useState('');\n  const {\n    0: cityName,\n    1: setCityName\n  } = useState('');\n  const {\n    0: location,\n    1: setLocation\n  } = useState();\n  useEffect(() => {\n    if (!query == '') {\n      forwardGeocoding();\n    }\n  }, [query]);\n\n  const getUserLocation = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      setLong(position.coords.longitude);\n      setLat(position.coords.latitude);\n    });\n  };\n\n  const updateSearch = event => {\n    setSearch(event.target.value);\n  };\n\n  const getSearch = event => {\n    event.preventDefault();\n    setQuery(search);\n    setDropdownLoading(true);\n  };\n\n  const updateCheckbox = event => {\n    if (event.target.checked == true) {\n      setUnits('us');\n    } else {\n      setUnits('si');\n    }\n  };\n\n  const forwardGeocoding = async () => {\n    const forwardAPI = `https://api.opencagedata.com/geocode/v1/json?q=${query}&key=d6d274c390434a5da83e82945466c21a`;\n    const response = await fetch(forwardAPI);\n\n    if (response.ok) {\n      const data = await response.json();\n      const filteredResults = data.results.filter(result => result.components._type == 'town' || result.components._type == 'city' || result.components._type == 'village');\n      const newResults = filteredResults.filter(result => result.components.town != undefined || result.components.village != undefined || result.components.city != undefined);\n      setDropdownItems(newResults);\n      setDropdownLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      long,\n      setLong,\n      lat,\n      setLat,\n      search,\n      setSearch,\n      query,\n      setQuery,\n      getUserLocation,\n      updateSearch,\n      getSearch,\n      dropdownItems,\n      dropdownLoading,\n      setDropdownLoading,\n      units,\n      setUnits,\n      updateCheckbox,\n      loading,\n      setLoading,\n      countryName,\n      setCountryName,\n      cityName,\n      setCityName,\n      location,\n      setLocation\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 3\n  }, this);\n};\n\nexport default AppWrapper;","map":{"version":3,"sources":["/Users/germanov/dev/weather/context/AppContext.js"],"names":["createContext","useContext","useState","useEffect","AppContext","AppWrapper","children","long","setLong","lat","setLat","search","setSearch","query","setQuery","dropdownItems","setDropdownItems","dropdownLoading","setDropdownLoading","units","setUnits","loading","setLoading","countryName","setCountryName","cityName","setCityName","location","setLocation","forwardGeocoding","getUserLocation","navigator","geolocation","getCurrentPosition","position","coords","longitude","latitude","updateSearch","event","target","value","getSearch","preventDefault","updateCheckbox","checked","forwardAPI","response","fetch","ok","data","json","filteredResults","results","filter","result","components","_type","newResults","town","undefined","village","city"],"mappings":"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","sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\n\nexport const AppContext = createContext();\n\nconst AppWrapper = ({ children }) => {\n\tconst [long, setLong] = useState(23.319941);\n\tconst [lat, setLat] = useState(42.698334);\n\tconst [search, setSearch] = useState('');\n\tconst [query, setQuery] = useState('');\n\tconst [dropdownItems, setDropdownItems] = useState([]);\n\tconst [dropdownLoading, setDropdownLoading] = useState(false);\n\tconst [units, setUnits] = useState('si');\n\tconst [loading, setLoading] = useState(true);\n\tconst [countryName, setCountryName] = useState('');\n\tconst [cityName, setCityName] = useState('');\n\tconst [location, setLocation] = useState();\n\n\tuseEffect(() => {\n\t\tif (!query == '') {\n\t\t\tforwardGeocoding();\n\t\t}\n\t}, [query]);\n\n\tconst getUserLocation = () => {\n\t\tnavigator.geolocation.getCurrentPosition((position) => {\n\t\t\tsetLong(position.coords.longitude);\n\t\t\tsetLat(position.coords.latitude);\n\t\t});\n\t};\n\n\tconst updateSearch = (event) => {\n\t\tsetSearch(event.target.value);\n\t};\n\n\tconst getSearch = (event) => {\n\t\tevent.preventDefault();\n\t\tsetQuery(search);\n\t\tsetDropdownLoading(true);\n\t};\n\n\tconst updateCheckbox = (event) => {\n\t\tif (event.target.checked == true) {\n\t\t\tsetUnits('us');\n\t\t} else {\n\t\t\tsetUnits('si');\n\t\t}\n\t};\n\n\tconst forwardGeocoding = async () => {\n\t\tconst forwardAPI = `https://api.opencagedata.com/geocode/v1/json?q=${query}&key=d6d274c390434a5da83e82945466c21a`;\n\t\tconst response = await fetch(forwardAPI);\n\n\t\tif (response.ok) {\n\t\t\tconst data = await response.json();\n\n\t\t\tconst filteredResults = data.results.filter(\n\t\t\t\t(result) =>\n\t\t\t\t\tresult.components._type == 'town' ||\n\t\t\t\t\tresult.components._type == 'city' ||\n\t\t\t\t\tresult.components._type == 'village'\n\t\t\t);\n\n\t\t\tconst newResults = filteredResults.filter(\n\t\t\t\t(result) =>\n\t\t\t\t\tresult.components.town != undefined ||\n\t\t\t\t\tresult.components.village != undefined ||\n\t\t\t\t\tresult.components.city != undefined\n\t\t\t);\n\n\t\t\tsetDropdownItems(newResults);\n\t\t\tsetDropdownLoading(false);\n\t\t}\n\t};\n\n\treturn (\n\t\t<AppContext.Provider\n\t\t\tvalue={{\n\t\t\t\tlong,\n\t\t\t\tsetLong,\n\t\t\t\tlat,\n\t\t\t\tsetLat,\n\t\t\t\tsearch,\n\t\t\t\tsetSearch,\n\t\t\t\tquery,\n\t\t\t\tsetQuery,\n\t\t\t\tgetUserLocation,\n\t\t\t\tupdateSearch,\n\t\t\t\tgetSearch,\n\t\t\t\tdropdownItems,\n\t\t\t\tdropdownLoading,\n\t\t\t\tsetDropdownLoading,\n\t\t\t\tunits,\n\t\t\t\tsetUnits,\n\t\t\t\tupdateCheckbox,\n\t\t\t\tloading,\n\t\t\t\tsetLoading,\n\t\t\t\tcountryName,\n\t\t\t\tsetCountryName,\n\t\t\t\tcityName,\n\t\t\t\tsetCityName,\n\t\t\t\tlocation,\n\t\t\t\tsetLocation,\n\t\t\t}}>\n\t\t\t{children}\n\t\t</AppContext.Provider>\n\t);\n};\n\nexport default AppWrapper;\n"]},"metadata":{},"sourceType":"module"}